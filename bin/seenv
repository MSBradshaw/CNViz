#!/usr/bin/env python
import argparse
import sys
import os
import gzip

def check_sample_list_format(filename):
    with open(filename,'r') as f:
        for line in f:
            if line[0] == '#':
                continue
            row = line.strip().split('\t')
            if len(row) != 5:
                print('SeeNV Error: samples list must have 5 columns')
                exit(1)
            if not os.path.exists(row[3]):
                print('SeeNV Error: sample file does not exist: {}'.format(row[3]))
                exit(1)
            if not os.path.exists(row[4]):
                print('SeeNV Error: sample index file does not exist: {}'.format(row[4]))
                exit(1)
            # ensure the suffix for 3 is .bam and 4 is .bai
            if row[3][-4:] != '.bam':
                print('SeeNV Error: sample file must have suffix .bam: {}'.format(row[3]))
                exit(1)
            if row[4][-4:] != '.bai':
                print('SeeNV Error: sample index file must have suffix .bai: {}'.format(row[4]))
                exit(1)

def assert_probe_sets_are_same(ref_db,probes):
    # get the first bed.gz file in ReferenceDB/AdjZscore/
    bgz = None
    for f in os.listdir(ref_db+'/AdjZscore/'):
        if '.bed.gz' in f and 'tbi' not in f:
            bgz = f
            break
    
    # read lines in bgz, get a list of all probes
    ref_probes = set()
    with gzip.open(ref_db+'/AdjZscore/'+bgz,'rt') as f:
        for l in f:
            row = l.strip().split('\t')
            ref_probes.add('\t'.join(row[0:3]))
    # get the probes in the probes file
    proband_probes = set()
    with open(probes,'r') as f:
        for l in f:
            row = l.strip().split('\t')
            proband_probes.add('\t'.join(row[0:3]))
    # compare the two sets
    if len(ref_probes) != len(proband_probes):
        print('SeeNV Error: the number of probes in the proband probes file and the reference database probes file are not the same. They are likely not the same set of probes.')
        exit(1)

            

def get_args():
    help_message ="""
        SeeNV usage:

        One of the following options is required

        --buildref, -b      flag to use function to build a reference panel database
        --plotsamples, -p   flag to plot samples

        Parameters to accompany --plotsamples, -p:
            -i INPUT_SAMPLES   (required) samples list
            -s SITES           (required) genomic sites bed file
            -c ALL_CALLS       (required) calls file. Each line should be a path to a set of calls in bed format
            -o OUTPUT          (required) output directory, where to save the plots
            -r REF_DB          (required) path to reference db created by the --buildref function of SeeNV
            -a GNOMAD          (required) the gnomad sv sites file with allele frequency information
            -t THREADS         (optional) number of threads to use, default 1 (you really want to use more than 1)
            -v varDB           (required) path to a GZipped bed file for the varDB common variants with an accompanying tabix indexed
            -m RepeatMasker    (required) path to a GZipped bed file for the RepeatMasker elements with an accompanying tabix indexed
            -q Site Quality    (optional) index of the column in the sites file that contains the site quality score, default None

        Parameters to accompany --buildref, -b
            -i INPUT_SAMPLES  (required) samples list
            -s SITES          (required) genomic sites bed file
            -c ALL_CALLS      (required) calls file. Each line should be a path to a set of calls in bed format
            -o OUTPUT         (required) output directory, reference panel database
            -t THREADS        (optional) number of threads to use, default 1 (you really want to use more than 1)
        """
    
    if '-h' in sys.argv or '--help' in sys.argv:
        print(help_message)
    param_sum = sum(['--buildref' in sys.argv or '-b' in sys.argv, '--plotsamples' in sys.argv or '-p' in sys.argv])
    if param_sum > 1 or param_sum == 0:
        print('SeeNV Error: you must use --buildref (-b) xor --plotsamples (-p)')
        print(help_message)
        exit(1)
    run_type = None
    try:
        if '--buildref' in sys.argv or '-b' in sys.argv:
            args = get_build_args()
            run_type = 'buildref'
        elif '--plotsamples' in sys.argv or '-p' in sys.argv:
            args = get_plot_args()
            run_type = 'plotsamples'
    except:
        print(help_message)
        exit(1)
    return run_type, args

def get_plot_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--plotsamples',
    '-p',
    action='store_true',
    dest='plotsamples',
    default=False,
    help='flag to plot samples')
    parser.add_argument('-i',dest='input_samples',help='samples list',required=True)
    parser.add_argument('-s',dest='sites',help='genomic sites bed file',required=True)
    parser.add_argument('-c',dest='all_calls',help='calls file. Each line should be a path to a set of calls in bed format',required=True)
    parser.add_argument('-o',dest='output',help='output directory, where to save the plots',required=True)
    parser.add_argument('-r',dest='ref_db',help='path to reference db created by the --buildref function of SeeNV',required=True)
    parser.add_argument('-a',dest='gnomad',help='the gnomad sv sites file with allele frequency information',required=True)
    parser.add_argument('-t',dest='threads',help='number of threads to use, default 1 (you really want to use more than 1)',default="1",required=False)
    parser.add_argument('-v',dest='vardb',help='path to bed file containing varDB common variants',required=True)
    parser.add_argument('-m',dest='repeat_masker',help='path to bed file containing repeatMasker',required=True)
    parser.add_argument('-q',dest='site_quality',help='index of the column in the sites file that contains the site quality score, default -1 to ignore this parameter',default=-1,required=False)
    parser.add_argument('-w',dest='workdir',help='location of working dirrectory or behind the scenes intermediate files', required=False, default='workproband')
    return parser.parse_args()

def get_build_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--buildref',
                        '-b',
                        action='store_true',
                        dest='buildref',
                        default=False,
                        help='flag to use function to build a reference panel database')
    parser.add_argument('-i',dest='input_samples',help='samples list',required=True)
    parser.add_argument('-s',dest='sites',help='genomic sites bed file',required=True)
    parser.add_argument('-c',dest='all_calls',help='calls file. Each line should be a path to a set of calls in bed format',required=True)
    parser.add_argument('-o',dest='output',help='output directory, reference panel database',required=True)
    parser.add_argument('-t',dest='threads',help='number of threads to use, default 1 (you really want to use more than 1)',default="1",required=False)
    parser.add_argument('-w',dest='workdir',help='location of working dirrectory or behind the scenes intermediate files', required=False, default='workpanel')
    return parser.parse_args()

run_type, args = get_args()

check_sample_list_format(args.input_samples)

if run_type == 'plotsamples':
    assert_probe_sets_are_same(args.ref_db,args.sites)
    
    if args.workdir[-1] != '/':
        args.workdir += '/'
    
    command="""
    conda_loc=$(which python)
    conda_bin=$(dirname $conda_loc)
    inputsamples="{samples}"
    probes="{probes}"
    calls="{calls}"
    gnomadfile="{af}"
    outputdir="{out}"
    refpanel="{ref_db}"
    threads="{threads}"
    vardb="{vardb}"
    repeat_masker="{repeat_masker}" 

    mkdir -p {workdir}
    cp $inputsamples {workdir}proband.samples
    cat $inputsamples | gargs --sep="\t" "ln -f -s {{3}} {workdir}{{0}}.bam"
    cat $inputsamples | gargs --sep="\t" "ln -f -s {{4}} {workdir}{{0}}.bai"
    # cat $inputsamples | gargs --sep="\t" "ln -f -s {{5}} {workdir}{{0}}.vcf.gz"
    # cat $inputsamples | gargs --sep="\t" "ln -f -s {{6}} {workdir}{{0}}.vcf.gz.tbi"

    mkdir -p {workdir}Probes
    ln -s "$(cd "$(dirname "$probes")"; pwd)/$(basename "$probes")" {workdir}Probes/probes.original.bed
    mkdir -p {workdir}Calls
    ln -s "$(cd "$(dirname "$calls")"; pwd)/$(basename "$calls")" {workdir}Calls/all.calls.original.txt
    ln -s "$(cd "$(dirname "$gnomadfile")"; pwd)/$(basename "$gnomadfile")" {workdir}gnomad_sv.bed.gz
    ln -s "$(cd "$(dirname "$gnomadfile")"; pwd)/$(basename "$gnomadfile")".tbi {workdir}gnomad_sv.bed.gz.tbi
    
    ln -s "$(cd "$(dirname "$vardb")"; pwd)/$(basename "$vardb")" {workdir}vardb.bed.gz
    ln -s "$(cd "$(dirname "$vardb")"; pwd)/$(basename "$vardb")".tbi {workdir}vardb.bed.gz.tbi

    ln -s "$(cd "$(dirname "$repeat_masker")"; pwd)/$(basename "$repeat_masker")" {workdir}repeat_masker.bed.gz
    ln -s "$(cd "$(dirname "$repeat_masker")"; pwd)/$(basename "$repeat_masker")".tbi {workdir}repeat_masker.bed.gz.tbi

    # put the name of the output dirrectory into a textfile for Snakemake to read in
    echo $outputdir > {workdir}outputdir.txt
    # put the path to the reference panel into a textfie for Snakemake to read in
    echo $refpanel > {workdir}reference_panel.txt
    
    # start the snakemake pipeline now they input files are in there proper locations
snakemake -c $threads -s $conda_bin/run_proband.smk --configfile $conda_bin/proband_config.json  -p --rerun-incomplete --restart-times 3 --config site_quality={site_quality} outputdir={out} workdir={workdir}
    """
    command = command.format(samples=args.input_samples,
                    probes=args.sites,
                    calls=args.all_calls,
                    out=args.output,
                    ref_db=args.ref_db,
                    af=args.gnomad,
                    threads=args.threads,
		    repeat_masker=args.repeat_masker,
            site_quality=args.site_quality,
		    vardb=args.vardb,
            workdir=args.workdir)

elif run_type == 'buildref':
    print('Building')
    
    if args.workdir[-1] != '/':
        args.workdir += '/'

    command="""
    conda_loc=$(which python)
    conda_bin=$(dirname $conda_loc)

    inputsamples="{samples}"
    probes="{probes}"
    calls="{calls}"
    outputdir="{out}"
    threads="{threads}"

    # create the {workdir} dir, dump sym linked files in to a location they can be easily accessed by SnakeMake 
    # will forably overwrite input files of the same name. All samples named MUST be unique.
    mkdir -p {workdir}
    cp $inputsamples {workdir}panel.samples
    cat $inputsamples | gargs --sep="\t" "ln -f -s {{3}} {workdir}{{0}}.bam"
    cat $inputsamples | gargs --sep="\t" "ln -f -s {{4}} {workdir}{{0}}.bai"
    # cat $inputsamples | gargs --sep="\t" "ln -f -s {{5}} {workdir}{{0}}.vcf.gz"
    # cat $inputsamples | gargs --sep="\t" "ln -f -s {{6}} {workdir}{{0}}.vcf.gz.tbi"
 
    mkdir -p {workdir}Probes
    ln -f -s "$(cd "$(dirname "$probes")"; pwd)/$(basename "$probes")" {workdir}Probes/probes.original.bed
    mkdir -p {workdir}Calls
    ln -f -s "$(cd "$(dirname "$calls")"; pwd)/$(basename "$calls")" {workdir}Calls/all.calls.original.txt

    # start the snakemake pipeline now they input files are in there proper locations
    snakemake -c $threads -s $conda_bin/build_panel.smk --configfile $conda_bin/panel_config.json --restart-times 3 --config workdir={workdir} outputdir={out}
    """
    command = command.format(samples=args.input_samples,probes=args.sites,calls=args.all_calls,out=args.output,threads=args.threads,workdir=args.workdir)
else:
    print('Internal Error, unexpected run_type')
    exit(1)

os.system(command)
